# -*- coding: utf-8 -*-
"""Data_Prep_Modelling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHz_0T3th_K_aNWY-hCuFIMlrMZdtN5T
"""

# Commented out IPython magic to ensure Python compatibility.
# load libaries
import psycopg2
import pandas as pd                # for dataframe
import numpy as np                   # for dealing with numpy
import matplotlib.pyplot as plt      # for plots
import seaborn as sns                # for statistical data visualization

# a magic function that renders the figure in a notebook
# %matplotlib Inline

# allow to display all columns of dataframe
pd.set_option('display.max_columns', None)

# Define your database connection parameters
db_params = { "dbname": "IBM_MarketScan", "user": "faa_student", "password": "deM%9tAch^", "host": "pixel.ourcloud.ou.edu", "port": "5432" }

# Establish a connection to the database
try:
    connection = psycopg2.connect(**db_params)
    cursor = connection.cursor()
    print("Connected to the database")
except Exception as e:
    print(f"Error: {e}")

df_17 = pd.read_sql_query(f"SELECT * FROM transformed_17", connection)

df_18 = pd.read_sql_query(f"SELECT * FROM transformed_18", connection)

# Close the cursor and connection
cursor.close()
connection.close()

df_17.head()

print(df_17.columns)

df_17.dtypes

# Convert the column 'enrolid', 'age', 'sex', 'agegrp' to integer data type
df_17['enrolid'] = df_17['enrolid'].astype(int)
df_17['age'] = df_17['age'].astype(int)
df_17['sex'] = df_17['sex'].astype(int)
df_17['agegrp'] = df_17['agegrp'].astype(int)

new_df = df_18[['enrolid', 'VII', 'IX', 'X', 'XIX']]
new_df.head()

new_column_names = {
    'VII' : 'target_VII',
    'IX' : 'target_IX',
    'X' : 'target_X',
    'XIX' : 'target_XIX',
}

new_df = new_df.rename(columns=new_column_names)
cols = ['target_VII', 'target_IX', 'target_X', 'target_XIX',]
for column in cols:
    new_df[column] = new_df[column].apply(lambda x: 1 if x != 0 else 0)

new_df.head()

new_df.shape

df_17.shape

new_df['enrolid'] = new_df['enrolid'].astype('int64')
df = pd.merge(df_17, new_df, on='enrolid', how='inner')
df.shape

df.head()

from sqlalchemy import create_engine
df17 = pd.DataFrame(df)

db_url = "postgresql://faa_student:deM%9tAch^@pixel.ourcloud.ou.edu/IBM_MarketScan"
engine = create_engine(db_url)

table_name = 'df_1718'  # Replace with the desired table name
df17.to_sql(table_name, engine, if_exists='replace', index=False)

df['IX'].value_counts()

df['target_IX'].value_counts()

# Count the occurrences of 0 and 1 in target_IX
value_counts = [52161,15860]

plt.bar(value_counts.index, value_counts.values)
plt.xticks(value_counts.index, labels=['0', '1'])
plt.xlabel('Values in target_IX')
plt.ylabel('Count')
plt.title('Distribution of target_IX where IX is 0')

for i, count in enumerate(value_counts):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.show()

df17_IX.shape

df['X'].value_counts()

df['target_X'].value_counts()

df17_X = df[df['X'] == 0]

# Count the occurrences of 0 and 1 in target_X
value_counts = df17_X['target_X'].value_counts()

plt.bar(value_counts.index, value_counts.values)
plt.xticks(value_counts.index, labels=['0', '1'])
plt.xlabel('Values in target_X')
plt.ylabel('Count')
plt.title('Distribution of target_X where X is 0')

for i, count in enumerate(value_counts):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.show()

df17_X.shape

df['XIX'].value_counts()

df['target_XIX'].value_counts()

df17_XIX = df[df['XIX'] == 0]

# Count the occurrences of 0 and 1 in target_XIX
value_counts = df17_XIX['target_XIX'].value_counts()

plt.bar(value_counts.index, value_counts.values)
plt.xticks(value_counts.index, labels=['0', '1'])
plt.xlabel('Values in target_XIX')
plt.ylabel('Count')
plt.title('Distribution of target_XIX where XIX is 0')

for i, count in enumerate(value_counts):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.show()

df17_XIX.shape

df['VII'].value_counts()

df['target_VII'].value_counts()

df17_VII = df[df['VII'] == 0]

# Count the occurrences of 0 and 1 in target_VII
value_counts = df17_VII['target_VII'].value_counts()

plt.bar(value_counts.index, value_counts.values)
plt.xticks(value_counts.index, labels=['0', '1'])
plt.xlabel('Values in target_VII')
plt.ylabel('Count')
plt.title('Distribution of target_VII where VII is 0')

for i, count in enumerate(value_counts):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.show()

df17_VII.shape

plt.figure(figsize=(10, 7))
df_17.corr()['IX'][:-1].sort_values().plot(kind='bar')
df_17.corr()['IX'].sort_values().plot(kind='bar')

plt.figure(figsize=(10, 7))
df_17.corr()['X'][:-1].sort_values().plot(kind='bar')
df_17.corr()['X'].sort_values().plot(kind='bar')

plt.figure(figsize=(10, 7))
df_17.corr()['XIX'][:-1].sort_values().plot(kind='bar')
df_17.corr()['XIX'].sort_values().plot(kind='bar')

plt.figure(figsize=(10, 7))
df_17.corr()['VII'][:-1].sort_values().plot(kind='bar')
df_17.corr()['VII'].sort_values().plot(kind='bar')

